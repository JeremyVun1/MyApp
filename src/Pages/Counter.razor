@page "/counter"

@using MyApp.Services;
@using Models = MyApp.Models;
@inject ICounterService counterService;

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

@foreach (var counter in _counters)
{
    <div class="card">
        <div class="card-header">
            Counter @counter.Key
        </div>
        <div class="card-body">
            <p class="card-text">Current Count: @counter.Value.Value</p>
            <button class="btn btn-primary" @onclick="@(_ => IncrementCounter(counter.Key))">Increment</button>
            <button class="btn btn-primary" @onclick="@(_ => DecrementCounter(counter.Key))">Decrement</button>
            <button class="btn btn-primary" @onclick="@(_ => DeleteCounter(counter.Key))">Delete</button>
        </div>
    </div>
}

<button class="btn btn-primary" @onclick="CreateCounter">New Counter</button>

@code {
    private Dictionary<int, Models.Counter> _counters = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshCounters();
    }
    
    private async Task RefreshCounters()
    {
        var response = await counterService.GetCounters();
        if (response != null)
        {
            _counters = response.ToDictionary(x => x.Id, x => x);
        }
        else
        {
            _counters = new ();
        }
    }

    private async Task IncrementCounter(int counterId)
    {
        await counterService.IncrementCounter(counterId);
        _counters[counterId].Value ++;
    }

    private async Task DecrementCounter(int counterId)
    {
        await counterService.DecrementCounter(counterId);
        _counters[counterId].Value --;
    }

    private async Task DeleteCounter(int counterId)
    {
        if (await counterService.DeleteCounter(counterId))
        {
            _counters.Remove(counterId);
        }
    }

    private async Task CreateCounter()
    {
        if (await counterService.CreateCounter())
        {
            await RefreshCounters();
        }
    }
}
